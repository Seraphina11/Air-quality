{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code]\n\n\n# %% [markdown]\n# ![1.png](attachment:22e08943-2067-4a80-a4d3-173b6b6cfe73.png)\n# \n# \n#   ### *The AQI was created to help communicate the severity of air quality levels for multiple pollutants to the public, the risks they carry and recommended defensive measures through a single composite index, a colour-code and broad categories of air quality levels (good, moderate, poor, etc.).*\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-05-25T13:04:05.529527Z\",\"iopub.execute_input\":\"2021-05-25T13:04:05.530033Z\",\"iopub.status.idle\":\"2021-05-25T13:04:05.534270Z\",\"shell.execute_reply.started\":\"2021-05-25T13:04:05.529985Z\",\"shell.execute_reply\":\"2021-05-25T13:04:05.533337Z\"}}\n## importing packages\nimport numpy as np\nimport pandas as pd\n\n# %% [markdown]\n# # **Preparing the Data**\n# ## The dataset used is hourly air quality data (2015 - 2020) from various measuring stations across India: \n# [https://www.kaggle.com/rohanrao/air-quality-data-in-india]\n# \n# \n#  We'll use the metro city (Delhi) and analyze the data of two stations ,here i am using **MUNDKA** and **RK-PURAM** as the air quality of these two places are reported to be worst among all places in Delhi and compare it with the actual AQI values present in the data at station, city, hour and day level to confirm the calculations are correct.\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-05-25T13:07:42.069094Z\",\"iopub.execute_input\":\"2021-05-25T13:07:42.069446Z\",\"iopub.status.idle\":\"2021-05-25T13:07:42.074386Z\",\"shell.execute_reply.started\":\"2021-05-25T13:07:42.069417Z\",\"shell.execute_reply\":\"2021-05-25T13:07:42.073517Z\"}}\n## defining constants\nPATH_STATION_HOUR = \"/kaggle/input/air-quality-data-in-india/station_hour.csv\"\nPATH_STATION_DAY = \"/kaggle/input/air-quality-data-in-india/station_day.csv\"\nPATH_CITY_HOUR = \"/kaggle/input/air-quality-data-in-india/city_hour.csv\"\nPATH_CITY_DAY = \"/kaggle/input/air-quality-data-in-india/city_day.csv\"\nPATH_STATIONS = \"/kaggle/input/air-quality-data-in-india/stations.csv\"\n\nSTATIONS = [\"DL031\", \"DL020\"]\n\n# %% [markdown]\n# \n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-05-25T13:07:46.159116Z\",\"iopub.execute_input\":\"2021-05-25T13:07:46.159464Z\",\"iopub.status.idle\":\"2021-05-25T13:07:53.141775Z\",\"shell.execute_reply.started\":\"2021-05-25T13:07:46.159434Z\",\"shell.execute_reply\":\"2021-05-25T13:07:53.140929Z\"}}\n## importing data and subsetting the station\ndf = pd.read_csv(PATH_STATION_HOUR, parse_dates = [\"Datetime\"])\n#  we need to convert it into date-time format\n# parse_dates =[\"date\"], converts the \"date\" column to date-time format\nstations = pd.read_csv(PATH_STATIONS)\n\ndf = df.merge(stations, on = \"StationId\")\n\n#isin() method helps in selecting rows with having a particular(or Multiple) value in a particular column\ndf = df[df.StationId.isin(STATIONS)]\ndf.sort_values([\"StationId\", \"Datetime\"], inplace = True)\n#If True, sort values in ascending order, otherwise descending\ndf[\"Date\"] = df.Datetime.dt.date.astype(str)\ndf.Datetime = df.Datetime.astype(str)\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-05-25T13:07:56.509407Z\",\"iopub.execute_input\":\"2021-05-25T13:07:56.509835Z\",\"iopub.status.idle\":\"2021-05-25T13:07:56.548719Z\",\"shell.execute_reply.started\":\"2021-05-25T13:07:56.509802Z\",\"shell.execute_reply\":\"2021-05-25T13:07:56.547952Z\"}}\ndf.head()\n\n# %% [markdown]\n# ## Formula\n# ![](https://i.imgur.com/vQR5Zy0.png)\n# \n# * The AQI calculation uses 7 measures: **PM2.5, PM10, SO2, NOx, NH3, CO and O3**.\n# * For **PM2.5, PM10, SO2, NOx and NH3** the average value in last 24-hrs is used with the condition of having at least 16 values.\n# * For **CO and O3** the maximum value in last 8-hrs is used.\n# * Each measure is converted into a Sub-Index based on pre-defined groups.\n# * Sometimes measures are not available due to lack of measuring or lack of required data points.\n# * Final AQI is the maximum Sub-Index with the condition that at least one of PM2.5 and PM10 should be available and at least three out of the seven should be available.\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-05-25T13:08:05.020197Z\",\"iopub.execute_input\":\"2021-05-25T13:08:05.020828Z\",\"iopub.status.idle\":\"2021-05-25T13:08:05.162760Z\",\"shell.execute_reply.started\":\"2021-05-25T13:08:05.020788Z\",\"shell.execute_reply\":\"2021-05-25T13:08:05.161615Z\"}}\ndf[\"PM10_24hr_avg\"] = df.groupby(\"StationId\")[\"PM10\"].rolling(window = 24, min_periods = 16).mean().values\ndf[\"PM2.5_24hr_avg\"] = df.groupby(\"StationId\")[\"PM2.5\"].rolling(window = 24, min_periods = 16).mean().values\ndf[\"SO2_24hr_avg\"] = df.groupby(\"StationId\")[\"SO2\"].rolling(window = 24, min_periods = 16).mean().values\ndf[\"NOx_24hr_avg\"] = df.groupby(\"StationId\")[\"NOx\"].rolling(window = 24, min_periods = 16).mean().values\ndf[\"NH3_24hr_avg\"] = df.groupby(\"StationId\")[\"NH3\"].rolling(window = 24, min_periods = 16).mean().values\ndf[\"CO_8hr_max\"] = df.groupby(\"StationId\")[\"CO\"].rolling(window = 8, min_periods = 1).max().values\ndf[\"O3_8hr_max\"] = df.groupby(\"StationId\")[\"O3\"].rolling(window = 8, min_periods = 1).max().values\n\n\n# %% [markdown]\n# ![3.png](attachment:109be220-0917-41ec-9403-05f851e0e1a1.png)## defining constants\n# PATH_STATION_HOUR = \"/kaggle/input/air-quality-data-in-india/station_hour.csv\"\n# PATH_STATION_DAY = \"/kaggle/input/air-quality-data-in-india/station_day.csv\"\n# PATH_CITY_HOUR = \"/kaggle/input/air-quality-data-in-india/city_hour.csv\"\n# PATH_CITY_DAY = \"/kaggle/input/air-quality-data-in-india/city_day.csv\"\n# PATH_STATIONS = \"/kaggle/input/air-quality-data-in-india/stations.csv\"\n\n# %% [markdown]\n# ![2.png](attachment:9a6eec57-eb5f-49fc-8deb-e6c65c51acbb.png)\n\n# %% [markdown]\n# ## PM2.5 (Particulate Matter 2.5-micrometer)\n# PM2.5 is measured in ug / m3 (micrograms per cubic meter of air). The predefined groups are defined in the function below:\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-05-25T13:08:10.589104Z\",\"iopub.execute_input\":\"2021-05-25T13:08:10.589520Z\",\"iopub.status.idle\":\"2021-05-25T13:08:10.651853Z\",\"shell.execute_reply.started\":\"2021-05-25T13:08:10.589488Z\",\"shell.execute_reply\":\"2021-05-25T13:08:10.650952Z\"}}\n## PM2.5 Sub-Index calculation\ndef get_PM25_subindex(x):\n    if x <= 30:\n        return x * 50 / 30\n    elif x <= 60:\n        return 50 + (x - 30) * 50 / 30\n    elif x <= 90:\n        return 100 + (x - 60) * 100 / 30\n    elif x <= 120:\n        return 200 + (x - 90) * 100 / 30\n    elif x <= 250:\n        return 300 + (x - 120) * 100 / 130\n    elif x > 250:\n        return 400 + (x - 250) * 100 / 130\n    else:\n        return 0\n#new column\ndf[\"PM2.5_SubIndex\"] = df[\"PM2.5_24hr_avg\"].apply(lambda x: get_PM25_subindex(x))\n\n\n# %% [markdown]\n# \n\n# %% [markdown]\n# ## PM10 (Particulate Matter 10-micrometer)\n# PM10 is measured in ug / m3 (micrograms per cubic meter of air). The predefined groups are defined in the function below:\n# \n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-05-25T13:08:17.249401Z\",\"iopub.execute_input\":\"2021-05-25T13:08:17.249804Z\",\"iopub.status.idle\":\"2021-05-25T13:08:17.308998Z\",\"shell.execute_reply.started\":\"2021-05-25T13:08:17.249773Z\",\"shell.execute_reply\":\"2021-05-25T13:08:17.307981Z\"}}\n## PM10 Sub-Index calculation\ndef get_PM10_subindex(x):\n    if x <= 50:\n        return x\n    elif x <= 100:\n        return x\n    elif x <= 250:\n        return 100 + (x - 100) * 100 / 150\n    elif x <= 350:\n        return 200 + (x - 250)\n    elif x <= 430:\n        return 300 + (x - 350) * 100 / 80\n    elif x > 430:\n        return 400 + (x - 430) * 100 / 80\n    else:\n        return 0\n\ndf[\"PM10_SubIndex\"] = df[\"PM10_24hr_avg\"].apply(lambda x: get_PM10_subindex(x))\n\n\n# %% [markdown]\n# \n\n# %% [markdown]\n# ## SO2 (Sulphur Dioxide)\n# SO2 is measured in ug / m3 (micrograms per cubic meter of air). The predefined groups are defined in the function below:\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-05-25T13:09:01.655370Z\",\"iopub.execute_input\":\"2021-05-25T13:09:01.655736Z\",\"iopub.status.idle\":\"2021-05-25T13:09:01.709872Z\",\"shell.execute_reply.started\":\"2021-05-25T13:09:01.655707Z\",\"shell.execute_reply\":\"2021-05-25T13:09:01.708953Z\"}}\n## SO2 Sub-Index calculation\ndef get_SO2_subindex(x):\n    if x <= 40:\n        return x * 50 / 40\n    elif x <= 80:\n        return 50 + (x - 40) * 50 / 40\n    elif x <= 380:\n        return 100 + (x - 80) * 100 / 300\n    elif x <= 800:\n        return 200 + (x - 380) * 100 / 420\n    elif x <= 1600:\n        return 300 + (x - 800) * 100 / 800\n    elif x > 1600:\n        return 400 + (x - 1600) * 100 / 800\n    else:\n        return 0\n\ndf[\"SO2_SubIndex\"] = df[\"SO2_24hr_avg\"].apply(lambda x: get_SO2_subindex(x))\n\n\n# %% [markdown]\n# \n\n# %% [markdown]\n# ## NOx (Any Nitric x-oxide)\n# NOx is measured in ppb (parts per billion). The predefined groups are defined in the function below:\n# \n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-05-25T13:09:28.474327Z\",\"iopub.execute_input\":\"2021-05-25T13:09:28.474745Z\",\"iopub.status.idle\":\"2021-05-25T13:09:28.532800Z\",\"shell.execute_reply.started\":\"2021-05-25T13:09:28.474701Z\",\"shell.execute_reply\":\"2021-05-25T13:09:28.531796Z\"}}\n## NOx Sub-Index calculation\ndef get_NOx_subindex(x):\n    if x <= 40:\n        return x * 50 / 40\n    elif x <= 80:\n        return 50 + (x - 40) * 50 / 40\n    elif x <= 180:\n        return 100 + (x - 80) * 100 / 100\n    elif x <= 280:\n        return 200 + (x - 180) * 100 / 100\n    elif x <= 400:\n        return 300 + (x - 280) * 100 / 120\n    elif x > 400:\n        return 400 + (x - 400) * 100 / 120\n    else:\n        return 0\n\ndf[\"NOx_SubIndex\"] = df[\"NOx_24hr_avg\"].apply(lambda x: get_NOx_subindex(x))\n\n\n# %% [markdown]\n# ## NH3 (Ammonia)\n# NH3 is measured in ug / m3 (micrograms per cubic meter of air). The predefined groups are defined in the function below:\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-05-25T13:09:30.519285Z\",\"iopub.execute_input\":\"2021-05-25T13:09:30.519674Z\",\"iopub.status.idle\":\"2021-05-25T13:09:30.572729Z\",\"shell.execute_reply.started\":\"2021-05-25T13:09:30.519623Z\",\"shell.execute_reply\":\"2021-05-25T13:09:30.571870Z\"}}\n## NH3 Sub-Index calculation\ndef get_NH3_subindex(x):\n    if x <= 200:\n        return x * 50 / 200\n    elif x <= 400:\n        return 50 + (x - 200) * 50 / 200\n    elif x <= 800:\n        return 100 + (x - 400) * 100 / 400\n    elif x <= 1200:\n        return 200 + (x - 800) * 100 / 400\n    elif x <= 1800:\n        return 300 + (x - 1200) * 100 / 600\n    elif x > 1800:\n        return 400 + (x - 1800) * 100 / 600\n    else:\n        return 0\n\ndf[\"NH3_SubIndex\"] = df[\"NH3_24hr_avg\"].apply(lambda x: get_NH3_subindex(x))\n\n\n# %% [markdown]\n# ## CO (Carbon Monoxide)\n# CO is measured in mg / m3 (milligrams per cubic meter of air). The predefined groups are defined in the function below:\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-05-25T13:09:58.428982Z\",\"iopub.execute_input\":\"2021-05-25T13:09:58.429574Z\",\"iopub.status.idle\":\"2021-05-25T13:09:58.490343Z\",\"shell.execute_reply.started\":\"2021-05-25T13:09:58.429525Z\",\"shell.execute_reply\":\"2021-05-25T13:09:58.489046Z\"}}\n## CO Sub-Index calculation\ndef get_CO_subindex(x):\n    if x <= 1:\n        return x * 50 / 1\n    elif x <= 2:\n        return 50 + (x - 1) * 50 / 1\n    elif x <= 10:\n        return 100 + (x - 2) * 100 / 8\n    elif x <= 17:\n        return 200 + (x - 10) * 100 / 7\n    elif x <= 34:\n        return 300 + (x - 17) * 100 / 17\n    elif x > 34:\n        return 400 + (x - 34) * 100 / 17\n    else:\n        return 0\n\ndf[\"CO_SubIndex\"] = df[\"CO_8hr_max\"].apply(lambda x: get_CO_subindex(x))\n\n\n# %% [markdown]\n# ## O3 (Ozone or Trioxygen)\n# O3 is measured in ug / m3 (micrograms per cubic meter of air). The predefined groups are defined in the function below:\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-05-25T13:10:08.475043Z\",\"iopub.execute_input\":\"2021-05-25T13:10:08.475405Z\",\"iopub.status.idle\":\"2021-05-25T13:10:08.533596Z\",\"shell.execute_reply.started\":\"2021-05-25T13:10:08.475376Z\",\"shell.execute_reply\":\"2021-05-25T13:10:08.532485Z\"}}\n## O3 Sub-Index calculation\ndef get_O3_subindex(x):\n    if x <= 50:\n        return x * 50 / 50\n    elif x <= 100:\n        return 50 + (x - 50) * 50 / 50\n    elif x <= 168:\n        return 100 + (x - 100) * 100 / 68\n    elif x <= 208:\n        return 200 + (x - 168) * 100 / 40\n    elif x <= 748:\n        return 300 + (x - 208) * 100 / 539\n    elif x > 748:\n        return 400 + (x - 400) * 100 / 539\n    else:\n        return 0\n\ndf[\"O3_SubIndex\"] = df[\"O3_8hr_max\"].apply(lambda x: get_O3_subindex(x))\n\n\n# %% [markdown]\n# ## AQI\n# The final AQI is the maximum Sub-Index among the available sub-indices with the condition that at least one of PM2.5 and PM10 should be available and at least three out of the seven should be available.\n# \n# There is no theoretical upper value of AQI but its rare to find values over 1000.\n# \n# The pre-defined buckets of AQI are as follows:\n# ![](https://i.imgur.com/XmnE0rT.png)\n# \n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-05-25T13:10:23.420217Z\",\"iopub.execute_input\":\"2021-05-25T13:10:23.420738Z\",\"iopub.status.idle\":\"2021-05-25T13:10:23.588629Z\",\"shell.execute_reply.started\":\"2021-05-25T13:10:23.420691Z\",\"shell.execute_reply\":\"2021-05-25T13:10:23.587613Z\"}}\n## AQI bucketing\ndef get_AQI_bucket(x):\n    if x <= 50:\n        return \"Good\"\n    elif x <= 100:\n        return \"Satisfactory\"\n    elif x <= 200:\n        return \"Moderate\"\n    elif x <= 300:\n        return \"Poor\"\n    elif x <= 400:\n        return \"Very Poor\"\n    elif x > 400:\n        return \"Severe\"\n    else:\n        return np.NaN\n\ndf[\"Checks\"] = (df[\"PM2.5_SubIndex\"] > 0).astype(int) + \\\n                (df[\"PM10_SubIndex\"] > 0).astype(int) + \\\n                (df[\"SO2_SubIndex\"] > 0).astype(int) + \\\n                (df[\"NOx_SubIndex\"] > 0).astype(int) + \\\n                (df[\"NH3_SubIndex\"] > 0).astype(int) + \\\n                (df[\"CO_SubIndex\"] > 0).astype(int) + \\\n                (df[\"O3_SubIndex\"] > 0).astype(int)\n\n#use NumPy max with axis = 1, we’re telling NumPy to compute the maxima horizontally, in the axis 1 direction.\ndf[\"AQI_calculated\"] = round(df[[\"PM2.5_SubIndex\", \"PM10_SubIndex\", \"SO2_SubIndex\", \"NOx_SubIndex\",\n                                 \"NH3_SubIndex\", \"CO_SubIndex\", \"O3_SubIndex\"]].max(axis = 1))\n\n\n#at least one of PM2.5 and PM10 should be available and at least three out of the seven should be available.\ndf.loc[df[\"PM2.5_SubIndex\"] + df[\"PM10_SubIndex\"] <= 0, \"AQI_calculated\"] = np.NaN\ndf.loc[df.Checks < 3, \"AQI_calculated\"] = np.NaN\n\ndf[\"AQI_bucket_calculated\"] = df[\"AQI_calculated\"].apply(lambda x: get_AQI_bucket(x))\n#negative of is na\ndf[~df.AQI_calculated.isna()].head(13)\n\n\n\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-05-25T13:10:37.430002Z\",\"iopub.execute_input\":\"2021-05-25T13:10:37.430349Z\",\"iopub.status.idle\":\"2021-05-25T13:10:37.463863Z\",\"shell.execute_reply.started\":\"2021-05-25T13:10:37.430318Z\",\"shell.execute_reply\":\"2021-05-25T13:10:37.462808Z\"}}\ndf[~df.AQI_calculated.isna()].AQI_bucket_calculated.value_counts()\n\n# %% [markdown]\n# ## Day level\n# To get AQI at day level, the AQI values are averaged over the hours of the day.\n# \n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-05-25T13:10:47.729100Z\",\"iopub.execute_input\":\"2021-05-25T13:10:47.729462Z\",\"iopub.status.idle\":\"2021-05-25T13:10:48.086173Z\",\"shell.execute_reply.started\":\"2021-05-25T13:10:47.729432Z\",\"shell.execute_reply\":\"2021-05-25T13:10:48.085174Z\"}}\ndf_station_hour = df\ndf_station_day = pd.read_csv(PATH_STATION_DAY)\n\ndf_station_day = df_station_day.merge(df.groupby([\"StationId\", \"Date\"])[\"AQI_calculated\"].mean().reset_index(), on = [\"StationId\", \"Date\"])\ndf_station_day.AQI_calculated = round(df_station_day.AQI_calculated)\n\n\n# %% [markdown]\n# ## City level\n# To get AQI at city level, the AQI values are averaged over stations of the city.\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-05-25T13:11:01.889505Z\",\"iopub.execute_input\":\"2021-05-25T13:11:01.889899Z\",\"iopub.status.idle\":\"2021-05-25T13:11:06.074036Z\",\"shell.execute_reply.started\":\"2021-05-25T13:11:01.889868Z\",\"shell.execute_reply\":\"2021-05-25T13:11:06.072891Z\"}}\ndf_city_hour = pd.read_csv(PATH_CITY_HOUR)\ndf_city_day = pd.read_csv(PATH_CITY_DAY)\n\ndf_city_hour[\"Date\"] = pd.to_datetime(df_city_hour.Datetime).dt.date.astype(str)\n\ndf_city_hour = df_city_hour.merge(df.groupby([\"City\", \"Datetime\"])[\"AQI_calculated\"].mean().reset_index(), on = [\"City\", \"Datetime\"])\ndf_city_hour.AQI_calculated = round(df_city_hour.AQI_calculated)\n\ndf_city_day = df_city_day.merge(df_city_hour.groupby([\"City\", \"Date\"])[\"AQI_calculated\"].mean().reset_index(), on = [\"City\", \"Date\"])\ndf_city_day.AQI_calculated = round(df_city_day.AQI_calculated)\n\n\n# %% [markdown]\n# ## Verification\n# Since this exact formula is used for AQI calculated, lets quickly compare it with the actual AQI values present in the raw data at each of the four levels.\n# \n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-05-25T13:11:18.961002Z\",\"iopub.execute_input\":\"2021-05-25T13:11:18.961418Z\",\"iopub.status.idle\":\"2021-05-25T13:11:19.038212Z\",\"shell.execute_reply.started\":\"2021-05-25T13:11:18.961380Z\",\"shell.execute_reply\":\"2021-05-25T13:11:19.036575Z\"}}\ndf_check_station_hour = df_station_hour[[\"AQI\", \"AQI_calculated\"]].dropna()\ndf_sthour = df_station_hour[df_station_hour[\"AQI\"]==df_station_hour[\"AQI_calculated\"]]\ndf_shour1 = df_sthour[[\"AQI\", \"AQI_calculated\",\"City\",\"StationName\"]]\n\n\ndf_check_station_day = df_station_day[[\"AQI\", \"AQI_calculated\"]].dropna()\ndf_stday = df_station_day[df_station_day[\"AQI\"]==df_station_day[\"AQI_calculated\"]]\ndf_sday1 = df_stday[[\"AQI\", \"AQI_calculated\"]]\n\n\ndf_check_city_hour = df_city_hour[[\"AQI\", \"AQI_calculated\"]].dropna()\ndf_check_city_hour1 = df_city_hour[[\"AQI\", \"AQI_calculated\",\"City\"]].dropna()\n\n\ndf_check_city_day = df_city_day[[\"AQI\", \"AQI_calculated\"]].dropna()\n\nprint(\"Station + Hour\")\nprint(\"Rows: \", df_check_station_hour.shape[0])\nprint(\"Matched AQI: \", (df_check_station_hour.AQI == df_check_station_hour.AQI_calculated).sum())\nprint(\"% Match: \", (df_check_station_hour.AQI == df_check_station_hour.AQI_calculated).sum() * 100 / df_check_station_hour.shape[0])\nprint(\"\\n\")\nprint(\"Station + Day\")\nprint(\"Rows: \", df_check_station_day.shape[0])\nprint(\"Matched AQI: \", (df_check_station_day.AQI == df_check_station_day.AQI_calculated).sum())\nprint(\"% Match: \", (df_check_station_day.AQI == df_check_station_day.AQI_calculated).sum() * 100 / df_check_station_day.shape[0])\nprint(\"\\n\")\nprint(\"City + Hour\")\nprint(\"Rows: \", df_check_city_hour.shape[0])\nprint(\"Matched AQI: \", (df_check_city_hour.AQI == df_check_city_hour.AQI_calculated).sum())\nprint(\"% Match: \", (df_check_city_hour.AQI == df_check_city_hour.AQI_calculated).sum() * 100 / df_check_city_hour.shape[0])\nprint(\"\\n\")\nprint(\"City + Day\")\nprint(\"Rows: \", df_check_city_day.shape[0])\nprint(\"Matched AQI: \", (df_check_city_day.AQI == df_check_city_day.AQI_calculated).sum())\nprint(\"% Match: \", (df_check_city_day.AQI == df_check_city_day.AQI_calculated).sum() * 100 / df_check_city_day.shape[0])\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-05-25T13:11:49.035061Z\",\"iopub.execute_input\":\"2021-05-25T13:11:49.035456Z\",\"iopub.status.idle\":\"2021-05-25T13:11:49.049109Z\",\"shell.execute_reply.started\":\"2021-05-25T13:11:49.035424Z\",\"shell.execute_reply\":\"2021-05-25T13:11:49.047915Z\"}}\n\ndf_shour1.head()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-05-25T13:11:57.129772Z\",\"iopub.execute_input\":\"2021-05-25T13:11:57.130144Z\",\"iopub.status.idle\":\"2021-05-25T13:11:57.142547Z\",\"shell.execute_reply.started\":\"2021-05-25T13:11:57.130113Z\",\"shell.execute_reply\":\"2021-05-25T13:11:57.141664Z\"}}\ndf_sday1.head()\n\n# %% [code]\n\n\n# %% [code]\n\n\n# %% [code]\n\n\n# %% [code]\n\n\n# %% [code]\n\n\n# %% [code]\n\n\n# %% [code]\n","metadata":{"_uuid":"0ccf5267-2d72-49c6-af99-2484f6de84ff","_cell_guid":"2f084cd1-23e9-47ae-850b-3c1164fdad94","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}